Submodule PhysGaussian contains modified content
Submodule gaussian-splatting contains modified content
Submodule submodules/diff-gaussian-rasterization contains modified content
diff --git a/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/cuda_rasterizer/rasterizer_impl.h b/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/cuda_rasterizer/rasterizer_impl.h
index bc3f0ec..7155540 100644
--- a/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/cuda_rasterizer/rasterizer_impl.h
+++ b/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/cuda_rasterizer/rasterizer_impl.h
@@ -3,7 +3,7 @@
  * GRAPHDECO research group, https://team.inria.fr/graphdeco
  * All rights reserved.
  *
- * This software is free for non-commercial, research and evaluation use 
+ * This software is free for non-commercial, research and evaluation use
  * under the terms of the LICENSE.md file.
  *
  * For inquiries contact  george.drettakis@inria.fr
@@ -11,64 +11,62 @@
 
 #pragma once
 
-#include <iostream>
-#include <vector>
 #include "rasterizer.h"
+#include <cstddef>
+#include <cstdint>
 #include <cuda_runtime_api.h>
+#include <iostream>
+#include <vector>
 
-namespace CudaRasterizer
-{
-	template <typename T>
-	static void obtain(char*& chunk, T*& ptr, std::size_t count, std::size_t alignment)
-	{
-		std::size_t offset = (reinterpret_cast<std::uintptr_t>(chunk) + alignment - 1) & ~(alignment - 1);
-		ptr = reinterpret_cast<T*>(offset);
-		chunk = reinterpret_cast<char*>(ptr + count);
-	}
+namespace CudaRasterizer {
+template <typename T>
+static void obtain(char *&chunk, T *&ptr, std::size_t count,
+                   std::size_t alignment) {
+  std::size_t offset =
+      (reinterpret_cast<std::uintptr_t>(chunk) + alignment - 1) &
+      ~(alignment - 1);
+  ptr = reinterpret_cast<T *>(offset);
+  chunk = reinterpret_cast<char *>(ptr + count);
+}
 
-	struct GeometryState
-	{
-		size_t scan_size;
-		float* depths;
-		char* scanning_space;
-		bool* clamped;
-		int* internal_radii;
-		float2* means2D;
-		float* cov3D;
-		float4* conic_opacity;
-		float* rgb;
-		uint32_t* point_offsets;
-		uint32_t* tiles_touched;
+struct GeometryState {
+  size_t scan_size;
+  float *depths;
+  char *scanning_space;
+  bool *clamped;
+  int *internal_radii;
+  float2 *means2D;
+  float *cov3D;
+  float4 *conic_opacity;
+  float *rgb;
+  uint32_t *point_offsets;
+  uint32_t *tiles_touched;
 
-		static GeometryState fromChunk(char*& chunk, size_t P);
-	};
+  static GeometryState fromChunk(char *&chunk, size_t P);
+};
 
-	struct ImageState
-	{
-		uint2* ranges;
-		uint32_t* n_contrib;
-		float* accum_alpha;
+struct ImageState {
+  uint2 *ranges;
+  uint32_t *n_contrib;
+  float *accum_alpha;
 
-		static ImageState fromChunk(char*& chunk, size_t N);
-	};
+  static ImageState fromChunk(char *&chunk, size_t N);
+};
 
-	struct BinningState
-	{
-		size_t sorting_size;
-		uint64_t* point_list_keys_unsorted;
-		uint64_t* point_list_keys;
-		uint32_t* point_list_unsorted;
-		uint32_t* point_list;
-		char* list_sorting_space;
+struct BinningState {
+  size_t sorting_size;
+  uint64_t *point_list_keys_unsorted;
+  uint64_t *point_list_keys;
+  uint32_t *point_list_unsorted;
+  uint32_t *point_list;
+  char *list_sorting_space;
 
-		static BinningState fromChunk(char*& chunk, size_t P);
-	};
+  static BinningState fromChunk(char *&chunk, size_t P);
+};
 
-	template<typename T> 
-	size_t required(size_t P)
-	{
-		char* size = nullptr;
-		T::fromChunk(size, P);
-		return ((size_t)size) + 128;
-	}
-};
\ No newline at end of file
+template <typename T> size_t required(size_t P) {
+  char *size = nullptr;
+  T::fromChunk(size, P);
+  return ((size_t)size) + 128;
+}
+}; // namespace CudaRasterizer
diff --git a/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/rasterize_points.h b/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/rasterize_points.h
index 9023d99..3068e68 100644
--- a/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/rasterize_points.h
+++ b/PhysGaussian/gaussian-splatting/submodules/diff-gaussian-rasterization/rasterize_points.h
@@ -3,65 +3,46 @@
  * GRAPHDECO research group, https://team.inria.fr/graphdeco
  * All rights reserved.
  *
- * This software is free for non-commercial, research and evaluation use 
+ * This software is free for non-commercial, research and evaluation use
  * under the terms of the LICENSE.md file.
  *
  * For inquiries contact  george.drettakis@inria.fr
  */
 
 #pragma once
-#include <torch/extension.h>
+#include <cstddef>
+#include <cstdint>
 #include <cstdio>
-#include <tuple>
 #include <string>
-	
-std::tuple<int, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor>
+#include <torch/extension.h>
+#include <tuple>
+
+std::tuple<int, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor,
+           torch::Tensor>
 RasterizeGaussiansCUDA(
-	const torch::Tensor& background,
-	const torch::Tensor& means3D,
-    const torch::Tensor& colors,
-    const torch::Tensor& opacity,
-	const torch::Tensor& scales,
-	const torch::Tensor& rotations,
-	const float scale_modifier,
-	const torch::Tensor& cov3D_precomp,
-	const torch::Tensor& viewmatrix,
-	const torch::Tensor& projmatrix,
-	const float tan_fovx, 
-	const float tan_fovy,
-    const int image_height,
-    const int image_width,
-	const torch::Tensor& sh,
-	const int degree,
-	const torch::Tensor& campos,
-	const bool prefiltered,
-	const bool debug);
+    const torch::Tensor &background, const torch::Tensor &means3D,
+    const torch::Tensor &colors, const torch::Tensor &opacity,
+    const torch::Tensor &scales, const torch::Tensor &rotations,
+    const float scale_modifier, const torch::Tensor &cov3D_precomp,
+    const torch::Tensor &viewmatrix, const torch::Tensor &projmatrix,
+    const float tan_fovx, const float tan_fovy, const int image_height,
+    const int image_width, const torch::Tensor &sh, const int degree,
+    const torch::Tensor &campos, const bool prefiltered, const bool debug);
+
+std::tuple<torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor,
+           torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor>
+RasterizeGaussiansBackwardCUDA(
+    const torch::Tensor &background, const torch::Tensor &means3D,
+    const torch::Tensor &radii, const torch::Tensor &colors,
+    const torch::Tensor &scales, const torch::Tensor &rotations,
+    const float scale_modifier, const torch::Tensor &cov3D_precomp,
+    const torch::Tensor &viewmatrix, const torch::Tensor &projmatrix,
+    const float tan_fovx, const float tan_fovy,
+    const torch::Tensor &dL_dout_color, const torch::Tensor &sh,
+    const int degree, const torch::Tensor &campos,
+    const torch::Tensor &geomBuffer, const int R,
+    const torch::Tensor &binningBuffer, const torch::Tensor &imageBuffer,
+    const bool debug);
 
-std::tuple<torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor, torch::Tensor>
- RasterizeGaussiansBackwardCUDA(
- 	const torch::Tensor& background,
-	const torch::Tensor& means3D,
-	const torch::Tensor& radii,
-    const torch::Tensor& colors,
-	const torch::Tensor& scales,
-	const torch::Tensor& rotations,
-	const float scale_modifier,
-	const torch::Tensor& cov3D_precomp,
-	const torch::Tensor& viewmatrix,
-    const torch::Tensor& projmatrix,
-	const float tan_fovx, 
-	const float tan_fovy,
-    const torch::Tensor& dL_dout_color,
-	const torch::Tensor& sh,
-	const int degree,
-	const torch::Tensor& campos,
-	const torch::Tensor& geomBuffer,
-	const int R,
-	const torch::Tensor& binningBuffer,
-	const torch::Tensor& imageBuffer,
-	const bool debug);
-		
-torch::Tensor markVisible(
-		torch::Tensor& means3D,
-		torch::Tensor& viewmatrix,
-		torch::Tensor& projmatrix);
\ No newline at end of file
+torch::Tensor markVisible(torch::Tensor &means3D, torch::Tensor &viewmatrix,
+                          torch::Tensor &projmatrix);
Submodule submodules/simple-knn contains modified content
diff --git a/PhysGaussian/gaussian-splatting/submodules/simple-knn/simple_knn.cu b/PhysGaussian/gaussian-splatting/submodules/simple-knn/simple_knn.cu
index e72e4c9..3705f01 100644
--- a/PhysGaussian/gaussian-splatting/submodules/simple-knn/simple_knn.cu
+++ b/PhysGaussian/gaussian-splatting/submodules/simple-knn/simple_knn.cu
@@ -3,7 +3,7 @@
  * GRAPHDECO research group, https://team.inria.fr/graphdeco
  * All rights reserved.
  *
- * This software is free for non-commercial, research and evaluation use 
+ * This software is free for non-commercial, research and evaluation use
  * under the terms of the LICENSE.md file.
  *
  * For inquiries contact  george.drettakis@inria.fr
@@ -14,208 +14,208 @@
 #include "cuda_runtime.h"
 #include "device_launch_parameters.h"
 #include "simple_knn.h"
+#include <cfloat>
 #include <cub/cub.cuh>
 #include <cub/device/device_radix_sort.cuh>
-#include <vector>
 #include <cuda_runtime_api.h>
 #include <thrust/device_vector.h>
 #include <thrust/sequence.h>
+#include <vector>
 #define __CUDACC__
 #include <cooperative_groups.h>
 #include <cooperative_groups/reduce.h>
 
 namespace cg = cooperative_groups;
 
-struct CustomMin
-{
-	__device__ __forceinline__
-		float3 operator()(const float3& a, const float3& b) const {
-		return { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) };
-	}
+struct CustomMin {
+  __device__ __forceinline__ float3 operator()(const float3 &a,
+                                               const float3 &b) const {
+    return {min(a.x, b.x), min(a.y, b.y), min(a.z, b.z)};
+  }
 };
 
-struct CustomMax
-{
-	__device__ __forceinline__
-		float3 operator()(const float3& a, const float3& b) const {
-		return { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) };
-	}
+struct CustomMax {
+  __device__ __forceinline__ float3 operator()(const float3 &a,
+                                               const float3 &b) const {
+    return {max(a.x, b.x), max(a.y, b.y), max(a.z, b.z)};
+  }
 };
 
-__host__ __device__ uint32_t prepMorton(uint32_t x)
-{
-	x = (x | (x << 16)) & 0x030000FF;
-	x = (x | (x << 8)) & 0x0300F00F;
-	x = (x | (x << 4)) & 0x030C30C3;
-	x = (x | (x << 2)) & 0x09249249;
-	return x;
+__host__ __device__ uint32_t prepMorton(uint32_t x) {
+  x = (x | (x << 16)) & 0x030000FF;
+  x = (x | (x << 8)) & 0x0300F00F;
+  x = (x | (x << 4)) & 0x030C30C3;
+  x = (x | (x << 2)) & 0x09249249;
+  return x;
 }
 
-__host__ __device__ uint32_t coord2Morton(float3 coord, float3 minn, float3 maxx)
-{
-	uint32_t x = prepMorton(((coord.x - minn.x) / (maxx.x - minn.x)) * ((1 << 10) - 1));
-	uint32_t y = prepMorton(((coord.y - minn.y) / (maxx.y - minn.y)) * ((1 << 10) - 1));
-	uint32_t z = prepMorton(((coord.z - minn.z) / (maxx.z - minn.z)) * ((1 << 10) - 1));
+__host__ __device__ uint32_t coord2Morton(float3 coord, float3 minn,
+                                          float3 maxx) {
+  uint32_t x =
+      prepMorton(((coord.x - minn.x) / (maxx.x - minn.x)) * ((1 << 10) - 1));
+  uint32_t y =
+      prepMorton(((coord.y - minn.y) / (maxx.y - minn.y)) * ((1 << 10) - 1));
+  uint32_t z =
+      prepMorton(((coord.z - minn.z) / (maxx.z - minn.z)) * ((1 << 10) - 1));
 
-	return x | (y << 1) | (z << 2);
+  return x | (y << 1) | (z << 2);
 }
 
-__global__ void coord2Morton(int P, const float3* points, float3 minn, float3 maxx, uint32_t* codes)
-{
-	auto idx = cg::this_grid().thread_rank();
-	if (idx >= P)
-		return;
+__global__ void coord2Morton(int P, const float3 *points, float3 minn,
+                             float3 maxx, uint32_t *codes) {
+  auto idx = cg::this_grid().thread_rank();
+  if (idx >= P)
+    return;
 
-	codes[idx] = coord2Morton(points[idx], minn, maxx);
+  codes[idx] = coord2Morton(points[idx], minn, maxx);
 }
 
-struct MinMax
-{
-	float3 minn;
-	float3 maxx;
+struct MinMax {
+  float3 minn;
+  float3 maxx;
 };
 
-__global__ void boxMinMax(uint32_t P, float3* points, uint32_t* indices, MinMax* boxes)
-{
-	auto idx = cg::this_grid().thread_rank();
-
-	MinMax me;
-	if (idx < P)
-	{
-		me.minn = points[indices[idx]];
-		me.maxx = points[indices[idx]];
-	}
-	else
-	{
-		me.minn = { FLT_MAX, FLT_MAX, FLT_MAX };
-		me.maxx = { -FLT_MAX,-FLT_MAX,-FLT_MAX };
-	}
-
-	__shared__ MinMax redResult[BOX_SIZE];
-
-	for (int off = BOX_SIZE / 2; off >= 1; off /= 2)
-	{
-		if (threadIdx.x < 2 * off)
-			redResult[threadIdx.x] = me;
-		__syncthreads();
-
-		if (threadIdx.x < off)
-		{
-			MinMax other = redResult[threadIdx.x + off];
-			me.minn.x = min(me.minn.x, other.minn.x);
-			me.minn.y = min(me.minn.y, other.minn.y);
-			me.minn.z = min(me.minn.z, other.minn.z);
-			me.maxx.x = max(me.maxx.x, other.maxx.x);
-			me.maxx.y = max(me.maxx.y, other.maxx.y);
-			me.maxx.z = max(me.maxx.z, other.maxx.z);
-		}
-		__syncthreads();
-	}
-
-	if (threadIdx.x == 0)
-		boxes[blockIdx.x] = me;
+__global__ void boxMinMax(uint32_t P, float3 *points, uint32_t *indices,
+                          MinMax *boxes) {
+  auto idx = cg::this_grid().thread_rank();
+
+  MinMax me;
+  if (idx < P) {
+    me.minn = points[indices[idx]];
+    me.maxx = points[indices[idx]];
+  } else {
+    me.minn = {FLT_MAX, FLT_MAX, FLT_MAX};
+    me.maxx = {-FLT_MAX, -FLT_MAX, -FLT_MAX};
+  }
+
+  __shared__ MinMax redResult[BOX_SIZE];
+
+  for (int off = BOX_SIZE / 2; off >= 1; off /= 2) {
+    if (threadIdx.x < 2 * off)
+      redResult[threadIdx.x] = me;
+    __syncthreads();
+
+    if (threadIdx.x < off) {
+      MinMax other = redResult[threadIdx.x + off];
+      me.minn.x = min(me.minn.x, other.minn.x);
+      me.minn.y = min(me.minn.y, other.minn.y);
+      me.minn.z = min(me.minn.z, other.minn.z);
+      me.maxx.x = max(me.maxx.x, other.maxx.x);
+      me.maxx.y = max(me.maxx.y, other.maxx.y);
+      me.maxx.z = max(me.maxx.z, other.maxx.z);
+    }
+    __syncthreads();
+  }
+
+  if (threadIdx.x == 0)
+    boxes[blockIdx.x] = me;
 }
 
-__device__ __host__ float distBoxPoint(const MinMax& box, const float3& p)
-{
-	float3 diff = { 0, 0, 0 };
-	if (p.x < box.minn.x || p.x > box.maxx.x)
-		diff.x = min(abs(p.x - box.minn.x), abs(p.x - box.maxx.x));
-	if (p.y < box.minn.y || p.y > box.maxx.y)
-		diff.y = min(abs(p.y - box.minn.y), abs(p.y - box.maxx.y));
-	if (p.z < box.minn.z || p.z > box.maxx.z)
-		diff.z = min(abs(p.z - box.minn.z), abs(p.z - box.maxx.z));
-	return diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
+__device__ __host__ float distBoxPoint(const MinMax &box, const float3 &p) {
+  float3 diff = {0, 0, 0};
+  if (p.x < box.minn.x || p.x > box.maxx.x)
+    diff.x = min(abs(p.x - box.minn.x), abs(p.x - box.maxx.x));
+  if (p.y < box.minn.y || p.y > box.maxx.y)
+    diff.y = min(abs(p.y - box.minn.y), abs(p.y - box.maxx.y));
+  if (p.z < box.minn.z || p.z > box.maxx.z)
+    diff.z = min(abs(p.z - box.minn.z), abs(p.z - box.maxx.z));
+  return diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
 }
 
-template<int K>
-__device__ void updateKBest(const float3& ref, const float3& point, float* knn)
-{
-	float3 d = { point.x - ref.x, point.y - ref.y, point.z - ref.z };
-	float dist = d.x * d.x + d.y * d.y + d.z * d.z;
-	for (int j = 0; j < K; j++)
-	{
-		if (knn[j] > dist)
-		{
-			float t = knn[j];
-			knn[j] = dist;
-			dist = t;
-		}
-	}
+template <int K>
+__device__ void updateKBest(const float3 &ref, const float3 &point,
+                            float *knn) {
+  float3 d = {point.x - ref.x, point.y - ref.y, point.z - ref.z};
+  float dist = d.x * d.x + d.y * d.y + d.z * d.z;
+  for (int j = 0; j < K; j++) {
+    if (knn[j] > dist) {
+      float t = knn[j];
+      knn[j] = dist;
+      dist = t;
+    }
+  }
 }
 
-__global__ void boxMeanDist(uint32_t P, float3* points, uint32_t* indices, MinMax* boxes, float* dists)
-{
-	int idx = cg::this_grid().thread_rank();
-	if (idx >= P)
-		return;
-
-	float3 point = points[indices[idx]];
-	float best[3] = { FLT_MAX, FLT_MAX, FLT_MAX };
-
-	for (int i = max(0, idx - 3); i <= min(P - 1, idx + 3); i++)
-	{
-		if (i == idx)
-			continue;
-		updateKBest<3>(point, points[indices[i]], best);
-	}
-
-	float reject = best[2];
-	best[0] = FLT_MAX;
-	best[1] = FLT_MAX;
-	best[2] = FLT_MAX;
-
-	for (int b = 0; b < (P + BOX_SIZE - 1) / BOX_SIZE; b++)
-	{
-		MinMax box = boxes[b];
-		float dist = distBoxPoint(box, point);
-		if (dist > reject || dist > best[2])
-			continue;
-
-		for (int i = b * BOX_SIZE; i < min(P, (b + 1) * BOX_SIZE); i++)
-		{
-			if (i == idx)
-				continue;
-			updateKBest<3>(point, points[indices[i]], best);
-		}
-	}
-	dists[indices[idx]] = (best[0] + best[1] + best[2]) / 3.0f;
+__global__ void boxMeanDist(uint32_t P, float3 *points, uint32_t *indices,
+                            MinMax *boxes, float *dists) {
+  int idx = cg::this_grid().thread_rank();
+  if (idx >= P)
+    return;
+
+  float3 point = points[indices[idx]];
+  float best[3] = {FLT_MAX, FLT_MAX, FLT_MAX};
+
+  for (int i = max(0, idx - 3); i <= min(P - 1, idx + 3); i++) {
+    if (i == idx)
+      continue;
+    updateKBest<3>(point, points[indices[i]], best);
+  }
+
+  float reject = best[2];
+  best[0] = FLT_MAX;
+  best[1] = FLT_MAX;
+  best[2] = FLT_MAX;
+
+  for (int b = 0; b < (P + BOX_SIZE - 1) / BOX_SIZE; b++) {
+    MinMax box = boxes[b];
+    float dist = distBoxPoint(box, point);
+    if (dist > reject || dist > best[2])
+      continue;
+
+    for (int i = b * BOX_SIZE; i < min(P, (b + 1) * BOX_SIZE); i++) {
+      if (i == idx)
+        continue;
+      updateKBest<3>(point, points[indices[i]], best);
+    }
+  }
+  dists[indices[idx]] = (best[0] + best[1] + best[2]) / 3.0f;
 }
 
-void SimpleKNN::knn(int P, float3* points, float* meanDists)
-{
-	float3* result;
-	cudaMalloc(&result, sizeof(float3));
-	size_t temp_storage_bytes;
-
-	float3 init = { 0, 0, 0 }, minn, maxx;
-
-	cub::DeviceReduce::Reduce(nullptr, temp_storage_bytes, points, result, P, CustomMin(), init);
-	thrust::device_vector<char> temp_storage(temp_storage_bytes);
-
-	cub::DeviceReduce::Reduce(temp_storage.data().get(), temp_storage_bytes, points, result, P, CustomMin(), init);
-	cudaMemcpy(&minn, result, sizeof(float3), cudaMemcpyDeviceToHost);
-
-	cub::DeviceReduce::Reduce(temp_storage.data().get(), temp_storage_bytes, points, result, P, CustomMax(), init);
-	cudaMemcpy(&maxx, result, sizeof(float3), cudaMemcpyDeviceToHost);
-
-	thrust::device_vector<uint32_t> morton(P);
-	thrust::device_vector<uint32_t> morton_sorted(P);
-	coord2Morton << <(P + 255) / 256, 256 >> > (P, points, minn, maxx, morton.data().get());
-
-	thrust::device_vector<uint32_t> indices(P);
-	thrust::sequence(indices.begin(), indices.end());
-	thrust::device_vector<uint32_t> indices_sorted(P);
-
-	cub::DeviceRadixSort::SortPairs(nullptr, temp_storage_bytes, morton.data().get(), morton_sorted.data().get(), indices.data().get(), indices_sorted.data().get(), P);
-	temp_storage.resize(temp_storage_bytes);
-
-	cub::DeviceRadixSort::SortPairs(temp_storage.data().get(), temp_storage_bytes, morton.data().get(), morton_sorted.data().get(), indices.data().get(), indices_sorted.data().get(), P);
-
-	uint32_t num_boxes = (P + BOX_SIZE - 1) / BOX_SIZE;
-	thrust::device_vector<MinMax> boxes(num_boxes);
-	boxMinMax << <num_boxes, BOX_SIZE >> > (P, points, indices_sorted.data().get(), boxes.data().get());
-	boxMeanDist << <num_boxes, BOX_SIZE >> > (P, points, indices_sorted.data().get(), boxes.data().get(), meanDists);
-
-	cudaFree(result);
-}
\ No newline at end of file
+void SimpleKNN::knn(int P, float3 *points, float *meanDists) {
+  float3 *result;
+  cudaMalloc(&result, sizeof(float3));
+  size_t temp_storage_bytes;
+
+  float3 init = {0, 0, 0}, minn, maxx;
+
+  cub::DeviceReduce::Reduce(nullptr, temp_storage_bytes, points, result, P,
+                            CustomMin(), init);
+  thrust::device_vector<char> temp_storage(temp_storage_bytes);
+
+  cub::DeviceReduce::Reduce(temp_storage.data().get(), temp_storage_bytes,
+                            points, result, P, CustomMin(), init);
+  cudaMemcpy(&minn, result, sizeof(float3), cudaMemcpyDeviceToHost);
+
+  cub::DeviceReduce::Reduce(temp_storage.data().get(), temp_storage_bytes,
+                            points, result, P, CustomMax(), init);
+  cudaMemcpy(&maxx, result, sizeof(float3), cudaMemcpyDeviceToHost);
+
+  thrust::device_vector<uint32_t> morton(P);
+  thrust::device_vector<uint32_t> morton_sorted(P);
+  coord2Morton<<<(P + 255) / 256, 256>>>(P, points, minn, maxx,
+                                         morton.data().get());
+
+  thrust::device_vector<uint32_t> indices(P);
+  thrust::sequence(indices.begin(), indices.end());
+  thrust::device_vector<uint32_t> indices_sorted(P);
+
+  cub::DeviceRadixSort::SortPairs(
+      nullptr, temp_storage_bytes, morton.data().get(),
+      morton_sorted.data().get(), indices.data().get(),
+      indices_sorted.data().get(), P);
+  temp_storage.resize(temp_storage_bytes);
+
+  cub::DeviceRadixSort::SortPairs(
+      temp_storage.data().get(), temp_storage_bytes, morton.data().get(),
+      morton_sorted.data().get(), indices.data().get(),
+      indices_sorted.data().get(), P);
+
+  uint32_t num_boxes = (P + BOX_SIZE - 1) / BOX_SIZE;
+  thrust::device_vector<MinMax> boxes(num_boxes);
+  boxMinMax<<<num_boxes, BOX_SIZE>>>(P, points, indices_sorted.data().get(),
+                                     boxes.data().get());
+  boxMeanDist<<<num_boxes, BOX_SIZE>>>(P, points, indices_sorted.data().get(),
+                                       boxes.data().get(), meanDists);
+
+  cudaFree(result);
+}
diff --git a/PhysGaussian/gs_simulation.py b/PhysGaussian/gs_simulation.py
index 4fa6ef1..b6221d0 100644
--- a/PhysGaussian/gs_simulation.py
+++ b/PhysGaussian/gs_simulation.py
@@ -40,7 +40,7 @@ from utils.render_utils import *
 wp.init()
 wp.config.verify_cuda = True
 
-ti.init(arch=ti.cuda, device_memory_GB=8.0)
+ti.init(arch=ti.cuda, device_memory_GB=20.0)
 
 
 class PipelineParamsNoparse:
@@ -169,7 +169,9 @@ if __name__ == "__main__":
         init_opacity = init_opacity[mask, :]
         init_shs = init_shs[mask, :]
 
-    transformed_pos, scale_origin, original_mean_pos = transform2origin(rotated_pos, preprocessing_params["scale"])
+    transformed_pos, scale_origin, original_mean_pos = transform2origin(
+        rotated_pos, preprocessing_params["scale"]
+    )
     transformed_pos = shift2center111(transformed_pos)
 
     # modify covariance matrix accordingly
